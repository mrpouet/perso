Ebuild development quiz
Revision 1.5 - 08 January 2009
Answer in whatever length necessary for completeness.
Review documentation. Consult your mentor if you're unable to locate answers.

*** Organizational structure questions

1. When is it appropriate to post to the following mailing lists: gentoo-core,
	gentoo-dev, gentoo-dev-announce, gentoo-project?

- gentoo-dev: Gentoo developper mainling-list general discussion, appropriate
  when it's needed to talk with devs community (including technical matters).
  All developers should subcribe to it.

- gentoo-dev-announce: Post for development specific announcements, 
  like new project page for example.

- gentoo-project: Post for non-technical matters and discussions in the Gentoo projects,
  like organizations, management structure...

- gentoo-core: Private mailing-list reserved for Gentoo developers,
  post to it for internal discussions. 
  However most of the topics should be discussed in the gentoo-dev.
  All developers should subcribe to it (need to contact the recruitment team)

2. Who should be contacted with complaints about specific developers or
	projects?

   In case of severe problem, or complaints, the best things is to contact
   the Gentoo Council project which serves as an appeal for these things.
   (complaints, affected person...)

3. What is the proper method for suggesting a wide-ranging feature or
   enhancement to Gentoo? Describe the process for getting this feature
   approved and implemented.

   For suggesting a wide-ranging features or an enhancement to Gentoo, the proper method 
   is to contact the GLEP (Gentoo Linux Enhancement Proposals) Project.
   The process steps are the following:

   - For the beginning i've a new idea/concept for Gentoo Linux
     -> The GLEP champion (the author) should first attempt to ascertain
       	if his idea is GLEP-able. 
     ->	A single GLEP needs to contain a single key proposal or new idea.
     ->	Proposals must be clear and not confused.
   - The GLEP champion then needs to send an email to the GLEP-editors <glep@gentoo.org>
     -> With a proposal title and a rough (fleshed out of course) draft of the GLEP.
     -> This draft must to be written in GLEP style (not described here).
   - The GLEP champion is then responsible to post the GLEP to the gentoo-dev mainling-list,
     and to the Gentoo Linux forums, in order to inform the community support for it.
   - He is also responsible for collecting feedbacks on a GLEP before submitting it for review.
     -> The GLEP need to be discuted on gentoo-dev@gentoo.org and/or the Gentoo Linux forums
     	(otherwises it will not accepted).
     -> The most recommended to keep a discussion efficient about the GLEP is to open a topic
     	in a specific forum thread.
   - When the champion has completed the GLEP he must to inform GLEP-editors that it is ready
     for review.
   - For a GLEP to be approved it must respect certain minimum criteria.
     -> It must be very clear and contains a complete description about the enhancement itself.
     -> The enhancement must represent a net improvement.
     -> The proposed implementation must be robust and not complicate the distribution.
     -> The proposed enhancement must respected the Gentoo Linux philosophy.
   - Once The GLEP is accepted, the reference implementation must be completed.
     (when it will completed and accepted, the status will change to "Final")

4. What is the purpose of the Gentoo Council?

   The purpose of the Gentoo Council is to decide on global issue importants decissions and policies
   in multiple Gentoo projects, it also serves for disciplinary decisions, or when a person
   was personally affected by any discussions or things (important things).

5. What is the Gentoo Foundation? How does one apply for membership and
   who are eligible?

   The Gentoo Foundation is a "framework" for intellectual property protection for the Gentoo project itself.
   It will embody this framework, without intervening in the Gentoo development process.
   It's a clear separation between these two last.
   it includes :
      - Gentoo trademark and logo use protection
      - developed code, documentation, artwork, copyright and licenses protection.
      - sponsor Gentoo-related conferences, technical developement ressources.
      - community protecting by requiring complete adherence to the Gentoo Social Contract.
      - financial caretaking (accepting donations, managing financial assets, investing it required ressources)

   In order to be eligible we must be a Gentoo developper, except this point , anyone
   can be nominated, the important thing is nominees need to accept their nomination 
   before voting begins.

6. What is the purpose of the Gentoo project structure?

   The purpose of Gentoo project structure is to solve management, coordination and communication 
   issues in the Gentoo project. Especially before this project there were not top-level
   management structure and no official regular meetings to communicate between developers serving in
   critical roles. Most of these communications took place on irc and too irregularly via e-mail,
   so it was difficult for example to set goals and track the status of projects...
    

7. Who can start new Gentoo projects and how is it done?

   Only Gentoo Linux developers are allowed to start/create a new project, first on all any project
   needs to have one or many leads and the leads are selected by the members of the project.
   The leader needs to create a project page in http://g.o/proj/<project_page> 
   (all projects needs to have one or many pages), then he must send a RFC e-mail to gentoo-dev-announce
   mailing list. 

8. What is the purpose of herds?

   The purpose of herds aims to ensure that ebuilds are organized in groups (per teams),
   this groups have maintainers , and to ensure that these ebuilds get maintainers assigned too.
   It's more practice to organize and structure an important project as Gentoo in subgroups, to be sure
   that the needed work is properly made, instead of have a single herd. The herds project aims
   for the development of infrastucture that is required and helps for the managements of a lot of ebuilds.

9. What is the devaway system?

   The devaway is a affectation system of status when a developper is busy, 
   mainly needed when the devs community or simply an other dev wants to contact him.
   It avoids any ambiguities about the origin of why the developper is missing, 
   and give a official ground for it.

   This system is handle by the roll-call sub-project of devrel project.

*** Ebuild technical/policy questions

1. You change a package's ebuild to install an init script. Previously,
	the package had no init script at all.
	Is a revision bump necessary? Why? What about when adding a patch?
	
   a)° If a init script is added to the package installable files it's needed to do a 
       revision bump because it will affect an important file that the package will install on a user system,
       and in general the user must be informed of it (init script is a non-trivial file)
   b)°
       For a patch there are two possibilities :
       	   - It's bugfix which will affect the execution of the program,
	     for example a segmentation fault or simply a non-needed behaviour in the program,
	     that implies it's a non-trivial bug, so we need to do a revision bump.
	   - The patch just correct a problem during the compilation phase, in general we considering these
	     fixs as "trivial bugfixs" , the ebuild doesn't need revision bump in this case.
	      

2. A user submits a "live" CVS ebuild. What would be a preferable
	alternative to such an ebuild?

	A preferable alternative would be an ebuild which use a source tarball with a "frozen" code,
	like a {alpha,beta,rc,release} version, because in general these tarball are considered as usable 
	by the developer (not by the distributor) and we are able to fix bug and report upstream.
	If any of these version are available for the package, is prefererable to write an ebuild which will use
	a snapshot version (on condition that there are not a new available snapshot all the days, because
	not maintainable).    


3. (a) What is repoman? How would you check for QA problems with 
   repoman?

   Repoman is a tool that ensure that a certain quality assurance (QA) is respected when we comminting
   in gentoo-x86 (portage tree), it's perform basic checks and creates Manifest.

   To check QA problems we can use two repoman commands :
      - repoman scan : Scan directory tree for QA issues (short listing)
      - repoman full : Scan directory tree for QA issues (full  listing)
   -> We can try to fix simple QA issues with repoman fix.
   -> If the QA problems are too importants, we need to fix it "by hand".

   Note: repoman scan is implicitly executed with repoman commit.

   (b) A user submits a brand-new ebuild for a new package. What are the
	proper steps (including repoman/cvs commands) to take to add
	this ebuild to the tree?

	We suppose that the package is named "foo" and it's category is named "app-misc"

	$ cd gentoo-x86
	$ cvs update (always update when we work on a part of the tree)
	$ cd app-misc
	$ mkdir foo
	$ cvs add foo
	$ cd foo
	$ cp /path/to/foo/foo-1.0.ebuild ./
	$ repoman manifest
	$ cvs add Manifest
	$ cvs add foo-1.0.ebuild
	$ cat <<EOF
	  <?xml version="1.0" encoding="UTF-8">
	  <!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
	  <pkgmetadata>
		<herd>gnome</herd>
		<maintainer>
			<email>mrpouet@gentoo.org</email>
		</maintainer>
		<use>
			<flag name='notify'>Enables Foo libnotify support please read,
			/etc/foo/notify_events.conf for more details (fully commented)
			</flag>
		</use>
	 </pkgmetadata>
	 EOF
	 > metadata.xml

	$ echangelog "Initial commit. Ebuild written by me XXXX YYYY Fixes bug #ZZZZZZ"
	$ cvs add ChangeLog
	$ cvs add metadata.xml
	$ repoman commit
	

4. A user submits an ebuild that has numerous technical problems and
	violates policy. How would you handle that situation?

	In first, i'll inform him that his ebuild includes technical problems and doesn't
	respect policies (and simples and corrects words), explaining to him steps per steps
	the problems.

	In second, i'll redirect him to the gentoo devmanual which describes very well
	ebuild writing and policy to respect.

	To conclude, if all is all right (after somes checks by myself) i'll accept his works,
	not forgetting to thanks him :)

5. You have a set of new ebuilds that could potentially benefit
	from a global USE flag. What steps should be taken before
	a new USE flag is implemented? What should be done if the
	USE flag only applies to a single package?

	a)° The global USE flag must satisfy several criteria:
	    	- It is used by a set of packages (many differents packages)
		- It has a general non-specific purpose (it doesn't need specific a single package)
	    If the effect of "thing" USE flag upon pkg-one is different that the effect it has upon
	    pkg-two, the "thing" USE flag is non-candidate to be a global USE flag, in other words
	    a same global USE flag need to have a same effect upon a set of packages (which will use it).

	    Before introducing of new global USE flag it must be discuted on gentoo-dev mainling-list.
	    Then the USE flag must be described in use.desc in the profiles/ directory. 
	
	b)° If a USE flag is only applied for a single package , it must be a local USE flag,
	    and it must be described in the metadata.xml of the package, a example of this
	    can be found in the answer of question number 3.
	    

6. You're creating an ebuild. Unfortunately, the ebuild's 'make install'
	target causes numerous access violations. What is the best 
	course of action to take to have a clean, straightforward
	ebuild?

	- First of all, we need to locate the step where the ebuild causes a sandbox violation
	  -> use ebuild command , like:  ebuild unpack, ebuild compile, ebuild install
	  -> step of the violation found !
        - In general it's advisable to use The sandbox shell , and it's functions :
	  -> addpredict: allows the developer to simulate (virtually) a write outside the sandbox,
	     it doesn't write anything on the live filesystem
	  -> addwrite: allows the developer to really write outside the sandbox (live system affected!),
	     it's more advisable to use addpredict to debugging.
	- We need to use pkg_preinst or pkg_postinst functions (sandbox disabled) which are respectively
	  called before and after installation on the live filesystem (${ROOT}), to apply a set of things,
	  command,generations... that the Makefile wanted to do during the installation phase.

	/!\ If the sandbox violation happens during the compilation phase (for example a non-safe Makefile 
	    written by hand without autotools) it's advisable to patch the Makefile to fix it properly,
	    an then retry again (the same check procedure).


7. You're creating an ebuild that needs a patch. The patch is 
	nontrivially large - bigger than 20kbytes. Where should
	the patch be kept?

	The patch should be kept on a gentoo mirror, the same mirror on which we will able
	to download the source tarball, in general if it's a set of patch it's recommended to create a tarball,
	otherwises the patch need to be compressed (the tarball too of course)

8. You're creating an ebuild that has its own license - one that
	doesn't exist in /usr/portage/licenses/. What is the proper
	course of action?

	- In First, i must add the license before committing the package.
	- I need to add a file describing the license in /usr/portage/licenses/ with the same name
	  of the license itself and the ebuild LICENSE variable must be contains the same name as the file.
	- When adding the license i need to use a plain text file if at all possible, somes license
	  use PDF files rather plain text, this should be done only if we are a legally required to do so.
	
	optional : Send a e-mail to the gentoo-dev mailing-list only if the license could be considered 
		   as "questionable", or if i'm not sure of the meaning of any part of it.
		   
	 
9. (a) You wish to have an ebuild marked "stable," taking it out of 
	~ARCH KEYWORDS. It's a library. What steps should
	be taken to do so?

	- The package has spent a reasonable amont of time in ~arch. In general thirty days
	  is the usual figure but depending of the package, if the package is critical
	  a long amont of time could be required (40 days for example).
	  For package which have only small changes between two different version, like release bugfix
	  (but need code review and test) a shorter period sometimes is more appropriate.

	- The package must not have any non-arch dependencies. 
	(it must not depend on an ~arch for example, because it impossible to ensure it's stability in this case)

	- The package must not have any severes bugs or issue which are not fixed.

	- The package must have been tested.

	- In our case, it's a library, so it's must be know to not break any packages which depends upon it.

	Note: for security fixes , the "amont of time" can be relaxed.

   (b) You wish to mark an ebuild "testing," putting it into ~ARCH
	KEYWORDS. It was previously hard-masked in package.mask.
	What should be done prior to doing so?

	- I need to removed it of package.mask
	- I need to be sure that the package was largely tested for arch
	  (tested in this case = the package doesn't crash, because it's really tested when it is in ~arch)
	- The package must know to not containing any criticals bugs not fixed on the bugzilla
	- The package must not depends upon any other package hard masked
	  (otherwises we can explicitly ensure that it's not experimental).
	- If the package was not masked by me, i need to contact for discussion the developer who masked it

	/!\ If it's a core package, or a depend of a core package, or if this last can has secondary effects,
	    the change needs to be apply after a intern discussion about it in the gentoo-dev mainling list. 
	
   (c) You wish to have an ebuild marked "stable." It is a popular
	application, but no other ebuilds depend on it.
	What should be done first?

	In first we need be sure that this packages contains only stable dependencies
	(no ebuilds depend on it, but i can depends upon other packages, so these last need to be stable,
	otherwises the package can't be stable).

10. You're committing a user-submitted ebuild. What should be in the
	initial ChangeLog?

	The initial changelog, generated with echangelog command, as following:

	$ echangelog "New ebuild, thanks to XXXX YYYY, fixs bug #ZZZZZZ"

11. What is the difference between DEPEND and RDEPEND?

    	 DEPEND: Must contains any dependencies which are required to unpack, patch, compile or
	 install phase, these dependencies are always installed before the package.

	 In generals dependencies required for compilation phase.

	 RDEPEND: Must contains any dependencies which are required at runtime,
	 these dependencies are installed after the package.

	 If RDEPEND is not specified, it's default value is DEPEND, but we should always
	 explicitly define RDEPEND="${DEPEND}". 

12. You wish to make a change to an ebuild, but you checked
	ChangeLogs and metadata.xml and it appears to be maintained by 
	someone	else. How should you proceed?

	Two ways to proceed:

	- I can write a patch of the changes that i made in the ebuild
	  (changes made in my personal overlay, never in the tree itself)
	  and i need to contact the maintainer of the ebuild, explain my changes,
	  and i send to him the patch.

 	- I need simply discuss with the maintainer, and if he's agree of course,
	  he can apply the appropriate changes himself.

13. You find a situation in which an eclass may be useful. What should
	you do before implementing such an eclass?

	Before commiting a new eclass to the tree, it should be mailed to the gentoo-dev mainling list
	with a discussion, justifications, and proposed implementation.

	Sometimes other alternatives are better than add a new eclass, that's why it's important to discuss
	about it with the other developers.

14. You find a package that will not build on some architectures without
	PIC (-fPIC) code in the shared libraries. What is the proper way
	to handle this situation?

	There are severals ways to enforce -fPIC on shared objects:
	
	- I can sed'ing the Makefile
	  -> a simple sed command can fix the problem, but it's can be not very readable
	  -> a simple sed may fail when an upstream changes the files.

	- Patching configure.{in,ac}/Makefile.am
	  -> In general Makefile are generated by configure script
	  -> I can patch the configure.{in,ac} the modify CFLAGS variable,
	     if she exists, and if she is defined in the configure,
	     ONLY IF the entire package is a shared object.
	  -> Otherwise if it's a package which includes a shared object, i can patch
	     the Makefile.am, to modify CFLAGS of the library.

15. How can you verify an ebuild has correct run time dependencies
	(RDEPEND) for all installed binaries?

	To verify properly that run-time dependencies are correct and "safe" we need to
	check to the DT_NEEDED entries in the .dynamic section of any ELF binaries of the package.

	To get the entire .dynamic section (but may be too long...)

	$ readelf -d /usr/bin/mplayer

	  Dynamic section at offset 0x34cf8 contains 21 entries:
  	  Tag        	     Type   	    	  Name/Value
 	  0x0000000000000001 (NEEDED)             Shared library: [libXext.so.6]
	  0x0000000000000001 (NEEDED)             Shared library: [libX11.so.6]
	  0x0000000000000001 (NEEDED)             Shared library: [libpthread.so.0]
	  [...]

	The faster and clear method in general is the following:

	$ scanelf -n /usr/bin/mplayer

	  TYPE 	  NEEDED	FILE 
	  ET_EXEC libXext.so.6,libX11.so.6,libpthread.so.0,libXss.so.1,libXv.so.1,libXxf86vm.so.1,libvga.so.1,
	  libfaac.so.0,libx264.so.65,libmp3lame.so.0,libncurses.so.5,libpng12.so.0,libz.so.1,libmng.so.1,
	  libasound.so.2,libfreetype.so.6,libfontconfig.so.1,libmad.so.0,libtheora.so.0,libm.so.6,libc.so.6 
	  /usr/bin/mplayer 

	In this output we can see that mplayer doesn't use either of those libraries, which means
	that they don't need to be in the mplayer RDEPEND.

	/!\ If we don't want to go to get indirect and misguided dependencies, we need to use --as-needed
	    LDFLAGS. 

	

16. How do you deal with a situation in which an ebuild wishes to
	install a file already installed by another package?

	The first package is named "foo" and the second which try to overwrite a file installed
	by "foo" is called "bar".

	- The first evident solution consist to block "bar" in depends of "foo" and block "foo" in depends
	  of "bar", now we are sure that the two packages can be installed in the same time on the same system,
	  but this case can produice a problem if these two packages block both.
	  In general this solution is to avoid.

	- We can change the directory in which the collision file is installed
	     -> we preserve the file installed by "foo"
	     -> we change the directory or the name of the file installed by "bar"
	- We can removed the file which produice the collisions (depending of file), in src_install
	or pkg_preinst.
	- Move the collision file in an other package, and ensure that "foo" and "bar" depend upon
	  this package.
	

17. Most configure scripts attempt to automatically determine
	settings based on the host system. When should the ebuild
	specifically override settings?

	- If settings are "unstable" or doesn't work, we can explicitly override them
	- If a setting is an optional support, we can override it depending of the USE flags designed
	  for that purpose.
	- An ebuild override particular settings, like CHOST or directory install prefix
	  this part is handle by econf function (the ebuild doesn't need to do it itself!)
	- If a particular setting like a CFLAGS is non-advisable for that package
	  (depending of a specified arch for example) it can explicitly override one of them.

18. What is EAPI?

    EAPI is a set of rules to say to the package manager how deal with a particular ebuild.
    Depending of the EAPI version, different set of rules or functions are integrated and usable
    by an ebuild. 
    It's a kind of extensions of a set of rules/functions and concept for an particular ebuild.
    (in general an extension of the default existing ebuild API, EAPI="0" by default)

    For example if an ebuild want to use src_prepare function it's needs to use EAPI="2",
    or if it's wants to use the SLOT variable (very useful) it needs to use EAPI="1". 

19. What is the procedure for removing packages from the tree?

    $ gentoo-x86
    $ cvs update
    $ cvs remove -f foo-1.0.ebuild
    $ repoman manifest
    $ echangelog "clean up old version"
    $ repoman commit
    

*** Please also submit the following information:

* GPG public key ID (if you do not have one, please create one)
  You should sign your quizzes with your key
  http://www.gentoo.org/doc/en/gnupg-user.xml

  -----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v2.0.11 (GNU/Linux)

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
=uaWa
-----END PGP PUBLIC KEY BLOCK-----


* SSH DSA public key (if you do not have one, please create one)
  http://www.gentoo.org/proj/en/infrastructure/cvs-sshkeys.xml
  If you don't paste your key inline, make sure it's signed by your
  gpg key.

  WTF ?   

* Date of birth

  14th may 1987

* Where do you live (Town/City, Country)
  
  I live in Bordeaux, in France.

* What are your programming/scripting skills, if applicable?

  - Very good skills of the C/C++ languages (especially C)
  - good skills in Bash, and a little of POSIX Shell
  - good skills of JAVA
  - good skills of Simple LR analyser (yacc) and lexical analyser (lex)
  - basic skills of Common Lisp. 

* What other areas are you experienced in?

  - Very good skills of the POSIX API
  - Very insteresting in the language theory (very hard but i'm training)
 (- Kitchen :p)

* What other projects have you contributed to, if any?

  I've contributed to The Wormux project, a worms-like strategy game,
  completly written in C++, i was a contributor in the IA improvment 
  (see their website).

* Tell us about yourself. This doesn't need to be strictly 
   computer-relevant; things like where you're from,
   hobbies, job, family, interests...

   I'm came from  Bordeaux, but at the origin i was born to Bruges,
   in a region of Bordeaux that we call "Médoc" in my town (the town of the wine),
   currently i'm student in Master of computer sciences "Software implements" at the faculty
   of Talence (next to Bordeaux).

   In my hobbies i practice apnea (sub-aquatique), bike, swimming...

   i've a big insterests in sciences in general, especially in physics...

   i'm native from a family of 2 childs, my brother, and me.
